1.List계열

1)Stack
=>Last In, First Out(LIFO)
=>나중에 들어간건 먼저 나온다
=>push() 삽입, pop() 삭제

2)****ArrayList****
=>배열기반의 리스트
=>가장 평범하게 많이 사용됨
=>인덱스(순서 있음), 값의 중복 허용, 동적 크기 조절

3)LinkedList
=>노드(객체)기반의 연결 리스트
=>다음 노드의 주소값을 기록해서 사슬처럼 연결해 놓은 구조
=>ArrayList와 사용방법은 같음
=>ArrayList보다 삽입,삭제는 유리하고 조회는 느림
=>Queue인터페이스를 구현하고 있기 때문에, Queue처럼도 사용가능함


2.Queue계열
1)Queue
=>First In First Out(FIFO)
=>컴퓨터의 운영체제 스케줄링, 다양한 프로그래밍에서도 사용됨
=>자바에서는 LinkedList를 Queue에 저장하면 Queue처럼 사용할 수 있음
=>큐의 대표적인 종류로는
    일반큐-LinkedList
    양방향큐-Dequeue
    우선순위큐-PriorityQueue

2)Deque
=>양방향 큐 (양측에서 추가 삭제가 가능한 구조)
=>자바에서는 ArrayDeque클래스로 사용합니다
=>Deque인터페이스를 상속받습니다

3)PriorityQueue
=>값을 넣으면 자동으로 정렬되는 형태
=>문자열, 숫자 같은 경우는 자동 정렬돼서 들어감
=>사용자 객체를 쓰게 되면, 정렬의 방식을 반드시 구현해야 사용할 수 있습니다

3.Set 계열
=>데이터를 중복 없이 저장하는 자료구조(값 중복x)
=>해시알고리즘을 사용해서 저장순서를 알 수가 없습니다
=>값의 저장 순서를 알 수 없어서 get()이 없다
=>값의 확인은 iterator라는 반복자로 확인해야 함
=>HashSet-기본 set 클래스
=>TreeSet-기본 set 클래스+정렬
=>LinkedHashSet-기본 set클래스+순서를 가지고 있는

4.Map 계열
=>key, value를 한 번에 저장하는 형태의 자료구조
=>객체생성시 멀티제네릭<key, value>에 대한 타입을 동시에 지정해야 합니다
=>key를 알고 있으면, 값을 빠르게 찾아주는 특징을 가진다
=>key를 저장하는 방식이 hash개념을 사용해서 저장합니다
=>프로그램 많이 사용됨. put(), get()
=>HastMap<>-키가 HashSet으로 저장되는 형태
=>TreeMap<>-키가 TreeSet으로 저장되는 형태
=>LinkedHasMap<>-키가 LinkedHashSet으로 저장되는 형태